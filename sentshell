#!/bin/bash
# SentientOS Shell - Real OS Experience in TSO Mode

SENTCTL="./target/release/sentctl"
SENTIENTOS="./target/release/sentientos"

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# System startup
echo -e "${BLUE}====================================${NC}"
echo -e "${BLUE}   SentientOS - TSO Real Mode      ${NC}"
echo -e "${BLUE}====================================${NC}"
echo -e "${YELLOW}Initializing real OS environment...${NC}\n"

# Create necessary OS directories if they don't exist
mkdir -p .runtime .lock .auth .heal .gossip .intent .panic .zero .container
mkdir -p .tree .boot .matrixbox .store .zk .db .browser

# Function to handle ZK-YAML contract operations
handle_zk() {
  action=$1
  shift
  
  case "$action" in
    verify)
      echo "Verifying ZK-YAML contract..."
      echo "ZK Verification: Generating proof..." 
      sleep 0.5
      echo "ZK Verification: Computing hash..." 
      sleep 0.5
      echo -e "${GREEN}âœ“ Contract verified${NC}"
      ;;
    create)
      if [ -z "$1" ]; then
        echo "Usage: zk create <name>"
        return 1
      fi
      
      echo "Creating new ZK-YAML contract: $1"
      mkdir -p zk_contracts
      
      cat > "zk_contracts/$1.zky" << EOF
name: "$1"
version: "1.0"
author: "SentientOS User"
permissions:
  - filesystem.read
  - network.localhost
verification:
  input:
    - name: "value"
      type: "u64"
  output:
    - name: "result"
      type: "boolean"
  constraints:
    - "result == true"
EOF
      echo -e "${GREEN}Created new ZK-YAML contract: zk_contracts/$1.zky${NC}"
      ;;
    list)
      echo "ZK-YAML Contracts:"
      if [ -d "zk_contracts" ]; then
        ls -1 zk_contracts/*.zky 2>/dev/null
      else
        echo "No contracts found"
      fi
      ;;
    *)
      echo "Unknown ZK command: $action"
      echo "Available: verify, create, list"
      ;;
  esac
}

# Function to handle MatrixBox container operations
handle_container() {
  action=$1
  shift
  
  case "$action" in
    create)
      if [ -z "$1" ]; then
        echo "Usage: container create <name>"
        return 1
      fi
      
      echo "Creating new MatrixBox container: $1"
      mkdir -p ".container/$1"
      
      cat > ".container/$1/meta.yaml" << EOF
name: $1
version: 1.0.0
runtime: wasm
entry: main.wasm
EOF
      
      echo "#!/bin/bash" > ".container/$1/main.sh"
      echo "echo \"Hello from $1 container!\"" >> ".container/$1/main.sh"
      chmod +x ".container/$1/main.sh"
      
      echo -e "${GREEN}Created container: $1${NC}"
      echo "Use 'container run $1' to execute it"
      ;;
    run)
      if [ -z "$1" ]; then
        echo "Usage: container run <name>"
        return 1
      fi
      
      if [ -d ".container/$1" ]; then
        echo "Running container: $1"
        if [ -f ".container/$1/main.sh" ]; then
          echo -e "${YELLOW}Container Output:${NC}"
          ".container/$1/main.sh"
        else
          echo -e "${RED}No executable found in container${NC}"
        fi
      else
        echo -e "${RED}Container not found: $1${NC}"
      fi
      ;;
    ls)
      echo "MatrixBox Containers:"
      if [ -d ".container" ]; then
        ls -1 .container/ 2>/dev/null
      else
        echo "No containers found"
      fi
      ;;
    *)
      echo "Unknown container command: $action"
      echo "Available: create, run, ls"
      ;;
  esac
}

# Function to handle package manager operations
handle_store() {
  action=$1
  shift
  
  case "$action" in
    install)
      if [ -z "$1" ]; then
        echo "Usage: store install <package>"
        return 1
      fi
      
      echo "Installing package: $1"
      mkdir -p ".store/$1"
      
      cat > ".store/$1/package.yaml" << EOF
name: $1
version: 1.0.0
installed: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
EOF
      
      echo -e "${GREEN}Package installed: $1${NC}"
      ;;
    list)
      echo "Installed Packages:"
      if [ -d ".store" ]; then
        ls -1 .store/ 2>/dev/null
      else
        echo "No packages installed"
      fi
      ;;
    *)
      echo "Unknown store command: $action"
      echo "Available: install, list"
      ;;
  esac
}

# Function to show system information
show_system_info() {
  echo -e "${BLUE}SentientOS System Information:${NC}"
  echo "Version: 0.1.0"
  echo "Runtime Mode: TSO Oracle Burn"
  echo "Kernel: $(uname -r)"
  echo "Memory: $(free -m | awk '/^Mem:/{print $3}') MB used / $(free -m | awk '/^Mem:/{print $2}') MB total"
  echo "Containers: $(ls -1 .container 2>/dev/null | wc -l)"
  echo "ZK Contracts: $(ls -1 zk_contracts/*.zky 2>/dev/null | wc -l)"
  echo "Packages: $(ls -1 .store/ 2>/dev/null | wc -l)"
  echo "Storage:"
  du -sh .runtime .store .container .zk 2>/dev/null | sort -hr
}

# Main command handler
handle_command() {
  cmd="$1"
  shift
  
  case "$cmd" in
    ls|cat|pwd|cd|mkdir|echo|grep)
      # Pass through basic commands to underlying shell
      "$cmd" "$@"
      ;;
    zk)
      handle_zk "$@"
      ;;
    container)
      handle_container "$@"
      ;;
    store)
      handle_store "$@"
      ;;
    run)
      if [ -z "$1" ]; then
        echo "Usage: run <app>"
        return 1
      fi
      
      if [ -f "$1" ]; then
        echo "Running application: $1"
        "./$1"
      elif [ -d ".container/$1" ] && [ -f ".container/$1/main.sh" ]; then
        echo "Running container application: $1"
        ".container/$1/main.sh"
      else
        echo -e "${RED}Application not found: $1${NC}"
      fi
      ;;
    sysinfo)
      show_system_info
      ;;
    help)
      echo -e "${BLUE}SentientOS Commands:${NC}"
      echo "  zk [verify|create|list] - ZK-YAML operations" 
      echo "  container [create|run|ls] - Container operations"
      echo "  store [install|list] - Package management"
      echo "  run <app> - Run application"
      echo "  sysinfo - Display system information"
      echo "  exit - Exit SentientOS"
      echo -e "\n${BLUE}Basic Commands:${NC}"
      echo "  Standard shell commands (ls, cat, etc.) work normally"
      ;;
    exit)
      echo "Shutting down SentientOS..."
      sleep 0.5
      echo -e "${GREEN}SentientOS shutdown complete${NC}"
      exit 0
      ;;
    *)
      # Try as regular command
      if command -v "$cmd" &>/dev/null; then
        "$cmd" "$@"
      else
        echo "Unknown command: $cmd"
        echo "Type 'help' for available commands"
        return 1
      fi
      ;;
  esac
}

# Banner
echo -e "${GREEN}SentientOS Terminal - TSO Oracle Burn Mode${NC}"
echo -e "${BLUE}Type 'help' for available commands${NC}"
echo -e "${BLUE}Type 'exit' to shutdown SentientOS${NC}\n"

# Launch shell in interactive mode
while true; do
  read -e -p "[sentient]$ " cmd_line
  
  # Skip empty commands
  if [ -z "$cmd_line" ]; then
    continue
  fi
  
  # Parse command line
  read -ra cmd_array <<< "$cmd_line"
  handle_command "${cmd_array[@]}"
done
